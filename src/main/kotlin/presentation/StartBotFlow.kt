package presentation

import app.logger
import application.usecase.*
import dev.inmo.tgbotapi.extensions.api.send.reply
import dev.inmo.tgbotapi.extensions.behaviour_builder.BehaviourContext
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onCommand
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onContact
import dev.inmo.tgbotapi.types.buttons.ReplyKeyboardMarkup
import dev.inmo.tgbotapi.types.buttons.RequestContactKeyboardButton
import domain.model.entity.User
import domain.model.value.ConversationMetadata
import domain.model.value.ConversationState

object StartBotFlow {
    @Suppress("t")
    suspend fun <BC : BehaviourContext> BC.setupStartBotFlow() {
        onCommand("start") { message -> try {
            val keyboard = ReplyKeyboardMarkup(
                listOf(
                    listOf(
                        RequestContactKeyboardButton("üìû –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
                    )
                ),
                resizeKeyboard = true,
                oneTimeKeyboard = false
            )
            reply(
                message,
                "–ù–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üìû –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\" –≤ –º–µ–Ω—é –∑–Ω–∏–∑—É.",
                replyMarkup = keyboard
            )
        } catch (e: Exception) { e.printStackTrace(); reply(message, CommonStrings.ERROR_UNKNOWN) } }

        onContact { contact -> try {
            logger.info { "Received contact: $contact" }
            val activeCompetition = GetActiveCompetitionRequest().execute()

            val phoneNumber =
                User.PhoneNumber(contact.content.contact.phoneNumber.let { if (!it.startsWith("+")) "+$it" else it })
            val registeredAdmins = FilterUsersByRoleRequest(User.Role.ADMIN).execute()
            if (registeredAdmins.isEmpty()) {
                val user = CreateUserRequest(
                    User(
                        phoneNumber = phoneNumber,
                        chatId = contact.chat.id.chatId,
                        name = User.Name(contact.content.contact.firstName),
                        role = User.Role.ADMIN,
                        conversationState = ConversationState.INITIAL,
                        conversationMetadata = ConversationMetadata("")
                    )
                ).execute()
                reply(
                    contact,
                    "–í—ñ—Ç–∞—î–º–æ, ${user.name.value}! –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    replyMarkup = MenuUtils.generateMenu(ConversationState.INITIAL, user.role, activeCompetition != null)
                )
            } else {
                val user = GetUserRequest(phoneNumber).execute()
                if (user != null && user.chatId == null) {
                    val user =
                        UpdateUserRequest(user.copy(chatId = contact.chat.id.chatId)).execute()!! // Must be not null if the operation is successful
                    reply(
                        contact,
                        "–í—ñ—Ç–∞—î–º–æ, ${user.name.value}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ ${user.role}.",
                        replyMarkup = MenuUtils.generateMenu(ConversationState.INITIAL, user.role, activeCompetition != null)
                    )
                } else if (user == null) {
                    reply(contact, "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –≤–Ω–µ—Å—Ç–∏ –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É.")
                } else {
                    reply(
                        contact,
                        "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º. –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                        replyMarkup = MenuUtils.generateMenu(ConversationState.INITIAL, user.role, activeCompetition != null)
                    )
                }
            }
        } catch (e: Exception) { e.printStackTrace(); reply(contact, CommonStrings.ERROR_UNKNOWN) } }
    }
}