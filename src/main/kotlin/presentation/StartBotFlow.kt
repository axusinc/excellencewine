package presentation

import CannotGetUserRoleException
import UserAlreadyExistsException
import app.logger
import application.usecase.GetUserRequest
import application.usecase.RegisterUserRequest
import dev.inmo.tgbotapi.extensions.api.send.reply
import dev.inmo.tgbotapi.extensions.api.send.send
import dev.inmo.tgbotapi.extensions.behaviour_builder.BehaviourContext
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onCommand
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onContact
import dev.inmo.tgbotapi.types.buttons.ReplyKeyboardMarkup
import dev.inmo.tgbotapi.types.buttons.RequestContactKeyboardButton
import dev.inmo.tgbotapi.types.toChatId
import domain.model.entity.User
import domain.model.value.ConversationState
import domain.model.value.PhoneNumber

suspend fun <BC : BehaviourContext> BC.startBotFlow() {
    onCommand("start") { message ->
        val keyboard = ReplyKeyboardMarkup(
            listOf(
                listOf(
                    RequestContactKeyboardButton("üìû –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
                )
            ),
            resizeKeyboard = true,
            oneTimeKeyboard = false
        )
        reply(message, "–ù–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üìû –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\" –≤ –º–µ–Ω—é –∑–Ω–∏–∑—É.", replyMarkup = keyboard)
    }
    onContact { contact ->
        logger.info { "Received contact: $contact" }
        val phoneNumber = contact.content.contact.phoneNumber.let { if(!it.startsWith("+")) "+$it" else it }
        Result.runCatching {
            RegisterUserRequest(contact.chat.id.toChatId().toUserId(), PhoneNumber(phoneNumber)).execute()
        }
            .onSuccess { user -> send(user.id.toChatId(), "–í—ñ—Ç–∞—î–º–æ, ${user.name.value}! –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ ${user.role}.", replyMarkup = MenuUtils.generateMenu(ConversationState.INITIAL, user.role)) }
            .onFailure { error -> when(error) {
                is UserAlreadyExistsException -> {
                    val user = GetUserRequest(contact.chat.id.toChatId().toUserId()).execute()!!
                    reply(
                        contact,
                        "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. " +
                                "–Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                        replyMarkup = MenuUtils.generateMenu(ConversationState.INITIAL, user.role)
                    )
                }
                is CannotGetUserRoleException -> reply(
                    contact,
                    "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. " +
                            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    replyMarkup = MenuUtils.EMPTY_MENU
                )
                else -> {
                    logger.error { error.stackTraceToString() }
                    reply(
                        contact,
                        "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. " +
                                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                        replyMarkup = MenuUtils.EMPTY_MENU
                    )
                }
            } }
    }
}